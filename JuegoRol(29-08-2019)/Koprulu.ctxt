#BlueJ class context
comment0.target=Koprulu
comment0.text=\r\n\ Write\ a\ description\ of\ class\ MyWorld\ here.\r\n\ \r\n\ @author\ (Jose\ Silva)\ \r\n\ @version\ (1.2\ 5/08/2019)\r\n
comment1.params=p1\ p2\ iteraciones\ isLoaded
comment1.target=Koprulu(java.lang.String,\ java.lang.String,\ int,\ boolean)
comment10.params=
comment10.target=java.lang.String\ getp1Raza()
comment11.params=
comment11.target=java.lang.String\ getp2Raza()
comment12.params=cantidad
comment12.target=void\ crearDepositosDeGas(int)
comment13.params=cantidad
comment13.target=void\ crearObstaculos(int)
comment14.params=num
comment14.target=void\ crearDepositos(int)
comment15.params=
comment15.target=java.util.List\ getDepositList()
comment16.params=
comment16.target=java.util.List\ getProtossList()
comment17.params=
comment17.target=java.util.List\ getZergList()
comment18.params=
comment18.target=java.util.List\ getTerranList()
comment19.params=raza\ num\ start\ end
comment19.target=void\ generarExtraterrestres(java.lang.String,\ int,\ int,\ int)
comment19.text=El\ metodo\ generarExtraterrestres\ sirve\ para\ crear\ el\ mismo\ numero\ de\ miembros\ de\ una\ raza\ para\ los\ jugadores\r\n\ \r\n\ el\ parametro\ String\ a\ corresponde\ a\ la\ raza\ que\ queremos\ crear,\r\n\ el\ parametro\ int\ num\ corresponde\ al\ numero\ de\ miembros\ de\ una\ raza\ que\ queremos\ crear\ (el\ rol\ de\ cada\ miembro\ se\ pone\ al\ azar)\r\n\ el\ paramtro\ int\ start\ corresponde\ desde\ que\ parte\ del\ mapa\ se\ van\ a\ generar\ los\ extraterrestres.\r\n\ el\ parametro\ int\ end\ corresponde\ hasta\ que\ parte\ del\ mapa\ se\ van\ a\ generar\ los\ extraterrestres.\r\n\ \ \ \ \r\n
comment2.params=
comment2.target=void\ prepare()
comment20.params=cont
comment20.target=java.lang.String\ generarParametro(int)
comment21.params=start\ end
comment21.target=int\ getRandomNumberRange(int,\ int)
comment21.text=este\ metodo\ tiene\ el\ nombre\ parecido\ a\ el\ metodo\ de\ greenfoot\ getRandomNumber\ (de\ hecho\ tiene\ el\ mismo\ nombre),\ pero\ ojo,\ que\ a\ este\ metodo\ hay\ que\ enviarle\ dos\ parametros,\ es\ como\ sobrecarga\r\n,\ este\ metodo\ lo\ que\ hace\ es\ segun\ el\ parametro\ inicial\ y\ final\ que\ yo\ le\ mande,\ me\ genera\ un\ numero\ dentro\ de\ ese\ rango,\ es\ bastante\ mejor\ que\ el\ metodo\ de\ greenfoot\ getRandomNumber\ que\ solo\r\ngenera\ un\ numero\ de\ 0\ al\ parametro\ que\ ud\ le\ de.\r\n
comment22.params=
comment22.target=void\ putCounters()
comment23.params=
comment23.target=void\ putCounters2()
comment24.params=
comment24.target=void\ checkStatus()
comment25.params=
comment25.target=java.lang.String\ checkWin()
comment26.params=
comment26.target=void\ openFile()
comment27.params=
comment27.target=void\ agregarRegistro()
comment28.params=
comment28.target=void\ cerrar()
comment29.params=
comment29.target=void\ checkSave()
comment3.params=
comment3.target=void\ newWorld()
comment4.params=
comment4.target=void\ act()
comment5.params=
comment5.target=void\ pressKey()
comment6.params=
comment6.target=void\ creating()
comment7.params=
comment7.target=int\ getIteraciones()
comment8.params=
comment8.target=java.util.List\ getHealthC()
comment9.params=
comment9.target=java.util.List\ getComando()
numComments=30
